geom_bar(stat = "sum") +
labs(title = "Fluctuation of Crime Numbers",
x = "Year",
y = "Number of Crimes",
fill = "Month") +
scale_x_discrete(labels = translation_dict) +
scale_y_continuous(labels = scales::comma_format())
# Heatmap for comparison between months (To view other types of crimes, just change the variable fill)
heatmap_month <- ggplot(dataReorganized, aes(x = Month, y = State, fill = Homicide)) +
geom_tile(width = 0.9, height = 0.9) +
labs(title = "Comparison of Homicide Numbers Between States (Month)",
x = "Month",
y = "State",
fill = "Homicide") +
scale_x_discrete(labels = translation_dict) +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red", midpoint = 250) +  # Specify your custom colors
theme_minimal()
print(heatmap_month)
# Filtrar os dados para incluir apenas o estado da Bahia
dataBahia <- subset(dataReorganized, State == "Bahia")
# Criar um gráfico de barras para o total de homicídios por mês
ggplot(dataBahia, aes(x = Month, y = Homicide, fill = as.factor(Year))) +
geom_bar(stat = "sum", position = "stack") +
geom_text(aes(label = Homicide), vjust = -0.5, position = position_stack(0.5)) +
labs(title = "Total de Homicídios na Bahia por Mês",
x = "Mês",
y = "Total de Homicídios",
fill = "Ano") +
scale_x_discrete(labels = translation_dict)
# Criar um gráfico de barras para a média de homicídios por mês
ggplot(dataBahia, aes(x = Month, y = Homicide, fill = as.factor(Year))) +
geom_bar(stat = "mean", position = "stack") +
geom_text(aes(label = sprintf("%.2f", Homicide)), vjust = -0.5, position = position_stack(0.5), color = "white") +
labs(title = "Média de Homicídios na Bahia por Mês",
x = "Mês",
y = "Média de Homicídios",
fill = "Ano") +
scale_x_discrete(labels = translation_dict)
# Criar um gráfico de barras para a média de homicídios por mês
ggplot(dataBahia, aes(x = Month, y = Homicide, fill = as.factor(Year))) +
stat_summary(fun = "mean", geom = "bar", position = "stack") +
stat_summary(fun.data = "mean_sdl", geom = "text", vjust = -0.5, position = position_stack(0.5), aes(label = sprintf("%.2f", ..y..)), color = "white") +
labs(title = "Média de Homicídios na Bahia por Mês",
x = "Mês",
y = "Média de Homicídios",
fill = "Ano") +
scale_x_discrete(labels = translation_dict)
# Heatmap for comparison between months (To view other types of crimes, just change the variable fill)
heatmap_month <- ggplot(dataReorganized, aes(x = Month, y = State, fill = Homicide)) +
geom_tile(width = 0.9, height = 0.9) +
labs(title = "Comparison of Homicide Numbers Between States (Month)",
x = "Month",
y = "State",
fill = "Homicide") +
scale_x_discrete(labels = translation_dict) +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red", midpoint = 250) +  # Specify your custom colors
theme_minimal()
print(heatmap_month)
# Criar um gráfico de barras para o total de homicídios por mês
ggplot(dataBahia, aes(x = Month, y = Homicide, fill = as.factor(Year))) +
geom_bar(stat = "sum", position = "stack") +
geom_text(aes(label = Homicide), vjust = -0.5, position = position_stack(0.5)) +
labs(title = "Total de Homicídios na Bahia por Mês",
x = "Mês",
y = "Total de Homicídios",
fill = "Ano") +
scale_x_discrete(labels = translation_dict)
# Heatmap para a soma de homicídios por mês
heatmap_total_homicides <- ggplot(dataReorganized, aes(x = Month, y = as.factor(Year), fill = Homicide)) +
geom_tile(stat = "sum") +
labs(title = "Soma de Homicídios por Mês",
x = "Mês",
y = "Ano",
fill = "Total de Homicídios") +
scale_x_discrete(labels = translation_dict) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +  # Especifique suas cores personalizadas
theme_minimal()
# Visualize o heatmap
print(heatmap_total_homicides)
# Heatmap para a soma de homicídios por mês
heatmap_total_crimes <- ggplot(dataReorganized, aes(x = Month, y = as.factor(Year), fill = Total_Crimes)) +
geom_tile(stat = "sum") +
labs(title = "Soma de Homicídios por Mês",
x = "Mês",
y = "Ano",
fill = "Total de Homicídios") +
scale_x_discrete(labels = translation_dict) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +  # Especifique suas cores personalizadas
theme_minimal()
# Visualize o heatmap
print(heatmap_total_homicides)
# Heatmap of total number of crimes between 2015 and 2022
heatmap_total_crimes <- ggplot(dataReorganized, aes(x = Month, y = as.factor(Year), fill = Total_Crimes)) +
geom_tile(stat = "sum") +
labs(title = "Crimes Per Month",
x = "Month",
y = "Year",
fill = "Number of Crimes") +
scale_x_discrete(labels = translation_dict) +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red", midpoint = 0) +
theme_minimal()
# View heatmap
print(heatmap_total_homicides)
# Heatmap of total number of crimes between 2015 and 2022
heatmap_total_crimes <- ggplot(dataReorganized, aes(x = Month, y = as.factor(Year), fill = Total_Crimes)) +
geom_tile(stat = "sum") +
labs(title = "Crimes Per Month",
x = "Month",
y = "Year",
fill = "Number of Crimes") +
scale_x_discrete(labels = translation_dict) +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red", midpoint = 0) +
theme_minimal()
# View heatmap
print(heatmap_total_crimes)
# Heatmap of total number of crimes between 2015 and 2022
heatmap_total_crimes <- ggplot(dataReorganized, aes(x = Month, y = as.factor(Year), fill = Total_Crimes)) +
geom_tile(stat = "sum") +
labs(title = "Crimes Per Month",
x = "Month",
y = "Year",
fill = "Number of Crimes") +
scale_x_discrete(labels = translation_dict) +
scale_fill_gradient2(low = "blue", mid = "yellow", high = "red", midpoint = 0) +
theme_minimal()
# View heatmap
print(heatmap_total_crimes)
# Heatmap for comparison between months (To view other types of crimes, just change the variable fill)
heatmap_month <- ggplot(dataReorganized, aes(x = Month, y = State, fill = Homicide)) +
geom_tile(stat = "sum", width = 0.9, height = 0.9) +
labs(title = "Comparison of Homicide Numbers Between States (Month)",
x = "Month",
y = "State",
fill = "Homicide") +
scale_x_discrete(labels = translation_dict) +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red", midpoint = 250) +  # Specify your custom colors
theme_minimal()
print(heatmap_month)
# Heatmap for comparison between years (To view other types of crimes, just change the variable fill)
heatmap_year <- ggplot(dataReorganized, aes(x = Year, y = State, fill = Rape)) +
geom_tile(width = 0.9, height = 0.9) +
labs(title = "Comparison of Rape Numbers Between States (Year)",
x = "Year",
y = "State",
fill = "Rape") +
scale_fill_gradient2(low = "yellow", mid = "orange", high = "red", midpoint = 250) +  # Specify your custom colors
theme_minimal()
print(heatmap_year)
# Filtrar os dados para incluir apenas o estado da Bahia
dataBahia <- subset(dataReorganized, State == "Bahia")
# Criar um gráfico de barras para o total de homicídios por mês
ggplot(dataBahia, aes(x = Month, y = Homicide, fill = as.factor(Year))) +
geom_bar(stat = "sum", position = "stack") +
geom_text(aes(label = Homicide), vjust = -0.5, position = position_stack(0.5)) +
labs(title = "Total de Homicídios na Bahia por Mês",
x = "Mês",
y = "Total de Homicídios",
fill = "Ano") +
scale_x_discrete(labels = translation_dict)
# MinMax Normalization function
normalized_MinMax <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# MinMax Normalization of crimes
Rape_norm<-normalized_MinMax(dataReorganized$Rape)
Vehicle_Theft_norm<-normalized_MinMax(dataReorganized$Vehicle_Theft)
Homicide_norm<-normalized_MinMax(dataReorganized$Homicide)
Bodily_injury_followed_by_death_norm<-normalized_MinMax(dataReorganized$Bodily_injury_followed_by_death)
Robbery_Institution_norm<-normalized_MinMax(dataReorganized$Robbery_Institution)
Cargo_Theft_norm<-normalized_MinMax(dataReorganized$Cargo_Theft)
Vehicle_Robbery_norm<-normalized_MinMax(dataReorganized$Vehicle_Robbery)
Robbery_Followed_by_Death_norm<-normalized_MinMax(dataReorganized$Robbery_Followed_by_Death)
Attempted_Homicide_norm<-normalized_MinMax(dataReorganized$Attempted_Homicide)
# Normalize rates over time (Homicide x Bodily_injury_followed_by_death)
dataReorganized <- dataReorganized %>%
mutate(Year = as.factor(Year)) %>%
group_by(Year) %>%
mutate(
Homicide_norm = normalized_MinMax(Homicide),
Bodily_injury_followed_by_death_norm = normalized_MinMax(Bodily_injury_followed_by_death)
) %>%
ungroup()
# Normalized plot - rates over time (Homicide x Bodily_injury_followed_by_death)
ggplot(dataReorganized, aes(x = Year, y = Homicide_norm, color = "Homicide")) +
geom_point() +
geom_point(aes(y = Bodily_injury_followed_by_death_norm, color = "Bodily Injury followed by death")) +
labs(title = "Correlation Over Time",
x = "Year",
y = "Normalized Rates",
color = "Crime") +
scale_color_manual(values = c("Homicide" = "red", "Bodily Injury followed by death" = "blue"))
# Scatter plot to compare the incidence of different types of crimes in different states
ggplot(dataReorganized, aes(x = Homicide, y = Attempted_Homicide, color = Crime)) +
geom_point() +
labs(title = "Comparison of Crime Incidence by State",
x = "Homicide",
y = "Attempted_Homicide",
color = "Crime") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dataReorganized, aes(x = Year, y = Homicide_norm, color = "Homicide")) +
geom_point() +
geom_point(aes(y = Attempted_Homicide_norm, color = "Attempted_Homicide")) +
labs(title = "Correlation Over Time",
x = "Year",
y = "Normalized Rates",
color = "Crime") +
scale_color_manual(values = c("Homicide" = "red", "Attempted_Homicide" = "blue"))
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide",
x = "Homicide",
y = "Attempted Homicide") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide",
x = "Homicide",
y = "Attempted Homicide") +
theme_minimal()
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide",
x = "Homicide",
y = "Attempted Homicide") +
theme_minimal() +
scale_color_manual(values = c("Homicide" = "red", "Attempted_Homicide" = "blue"))
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide",
x = "Homicide",
y = "Attempted Homicide") +
scale_color_manual(values = c("black", "red")) +
theme_minimal() +
ggplot(dataReorganized, aes(x = Year, y = Homicide_norm, color = "Homicide")) +
geom_point() +
geom_point(aes(y = Attempted_Homicide_norm, color = "Attempted_Homicide")) +
labs(title = "Correlation Over Time",
x = "Year",
y = "Normalized Rates",
color = "Crime") +
scale_color_manual(values = c("Homicide" = "red", "Attempted_Homicide" = "blue"))
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide",
x = "Homicide",
y = "Attempted Homicide") +
scale_color_manual(values = c("black", "red")) +
theme_minimal() +
ggplot(dataReorganized, aes(x = Year, y = Homicide_norm, color = "Homicide")) +
geom_point() +
geom_point(aes(y = Attempted_Homicide_norm, color = "Attempted_Homicide")) +
labs(title = "Correlation Over Time",
x = "Year",
y = "Normalized Rates",
color = "Crime") +
scale_color_manual(values = c("Homicide" = "red", "Attempted_Homicide" = "blue"))
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm, color = Crime)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide",
x = "Homicide",
y = "Attempted Homicide") +
scale_color_manual(values = c("black", "red")) +
theme_minimal() +
ggplot(dataReorganized, aes(x = Year, y = Homicide_norm, color = "Homicide")) +
geom_point() +
geom_point(aes(y = Attempted_Homicide_norm, color = "Attempted_Homicide")) +
labs(title = "Correlation Over Time",
x = "Year",
y = "Normalized Rates",
color = "Crime") +
scale_color_manual(values = c("Homicide" = "red", "Attempted_Homicide" = "blue"))
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide",
x = "Homicide",
y = "Attempted Homicide") +
theme_minimal() +
ggplot(dataReorganized, aes(x = Year, y = Homicide_norm, color = "Homicide")) +
geom_point() +
geom_point(aes(y = Attempted_Homicide_norm, color = "Attempted_Homicide")) +
labs(title = "Correlation Over Time",
x = "Year",
y = "Normalized Rates",
color = "Crime") +
scale_color_manual(values = c("Homicide" = "red", "Attempted_Homicide" = "blue"))
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide",
x = "Homicide",
y = "Attempted Homicide") +
theme_minimal() +
ggplot(dataReorganized, aes(x = Year, y = Homicide_norm, color = "Homicide")) +
geom_point() +
geom_point(aes(y = Attempted_Homicide_norm, color = "Attempted_Homicide")) +
labs(title = "Correlation Over Time",
x = "Year",
y = "Normalized Rates",
color = "Crime") +
scale_color_manual(values = c("Homicide" = "red", "Attempted_Homicide" = "blue"))
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide",
x = "Homicide",
y = "Attempted Homicide") +
theme_minimal()
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide (Normalized)",
x = "Homicide",
y = "Attempted Homicide") +
theme_minimal()
ggplot(dataReorganized, aes(x = Year)) +
geom_line(aes(y = Homicide, color = "Homicide")) +
geom_line(aes(y = Rape, color = "Rape")) +
geom_line(aes(y = Vehicle_Theft, color = "Vehicle Theft")) +
# Adicione mais linhas para outros tipos de crime, se necessário
labs(title = "Tendências Anuais de Crimes",
x = "Ano",
y = "Total de Crimes",
color = "Tipo de Crime") +
theme_minimal()
ggplot(dataReorganized, aes(x = Year, y = Homicide, color = "Homicide")) +
geom_line() +
geom_line(aes(y = Rape, color = "Rape")) +
geom_line(aes(y = Vehicle_Theft, color = "Vehicle Theft")) +
# Adicione mais linhas para outros tipos de crime, se necessário
labs(title = "Evolução do Número de Ocorrências de Crimes",
x = "Ano",
y = "Número de Ocorrências",
color = "Tipo de Crime") +
theme_minimal()
ggplot(dataReorganized, aes(x = as.factor(Year), y = Homicide, color = "Homicide")) +
geom_line() +
geom_line(aes(y = Rape, color = "Rape")) +
geom_line(aes(y = Vehicle_Theft, color = "Vehicle Theft")) +
# Adicione mais linhas para outros tipos de crime, se necessário
labs(title = "Evolução do Número de Ocorrências de Crimes",
x = "Ano",
y = "Número de Ocorrências",
color = "Tipo de Crime") +
theme_minimal()
# Gráfico de linha para a evolução do número de ocorrências de diferentes tipos de crime ao longo dos anos
ggplot(dataReorganized, aes(x = Year, y = Homicide, color = "Homicide")) +
geom_line() +
geom_line(aes(y = Rape, color = "Rape")) +
geom_line(aes(y = Vehicle_Theft, color = "Vehicle Theft")) +
# Adicione mais linhas para outros tipos de crime, se necessário
labs(title = "Evolução do Número de Ocorrências de Crimes",
x = "Ano",
y = "Número de Ocorrências",
color = "Tipo de Crime") +
theme_minimal()
# Gráfico de linha para a evolução do número de ocorrências de diferentes tipos de crime ao longo dos anos
ggplot(dataReorganized, aes(x = Year, y = Homicide, color = "Homicide")) +
geom_line() +
geom_line(aes(y = Rape, color = "Rape")) +
geom_line(aes(y = Vehicle_Theft, color = "Vehicle Theft")) +
# Adicione mais linhas para outros tipos de crime, se necessário
labs(title = "Evolução do Número de Ocorrências de Crimes",
x = "Ano",
y = "Número de Ocorrências",
color = "Tipo de Crime") +
theme_minimal()
# Gráfico de linha para a evolução do número de ocorrências de diferentes tipos de crime ao longo dos anos
ggplot(dataReorganized, aes(x = Year, y = Homicide_norm, color = "Homicide")) +
geom_line() +
geom_line(aes(y = Rape_norm, color = "Rape")) +
geom_line(aes(y = Vehicle_Theft_norm, color = "Vehicle Theft")) +
# Adicione mais linhas para outros tipos de crime, se necessário
labs(title = "Evolução do Número de Ocorrências de Crimes",
x = "Ano",
y = "Número de Ocorrências",
color = "Tipo de Crime") +
theme_minimal()
# Gráfico de linha para a evolução do número de ocorrências de diferentes tipos de crime ao longo dos anos
ggplot(dataReorganized, aes(x = Year, y = Homicide_norm, color = "Homicide")) +
geom_bar() +
geom_bar(aes(y = Rape_norm, color = "Rape")) +
geom_bar(aes(y = Vehicle_Theft_norm, color = "Vehicle Theft")) +
# Adicione mais linhas para outros tipos de crime, se necessário
labs(title = "Evolução do Número de Ocorrências de Crimes",
x = "Ano",
y = "Número de Ocorrências",
color = "Tipo de Crime") +
theme_minimal()
ggplot(dataReorganized, aes(x = Year)) +
geom_line(aes(y = Homicide, color = "Homicide")) +
geom_line(aes(y = Rape, color = "Rape")) +
geom_line(aes(y = Vehicle_Theft, color = "Vehicle Theft")) +
# Adicione mais linhas para outros tipos de crime, se necessário
labs(title = "Tendências Anuais de Crimes",
x = "Ano",
y = "Total de Crimes",
color = "Tipo de Crime") +
theme_minimal()
# Scatter plot to compare the two types of crime
ggplot(dataReorganized, aes(x = Homicide_norm, y = Attempted_Homicide_norm)) +
geom_point() +
labs(title = "Correlation between Homicide and Attempted Homicide (Normalized)",
x = "Homicide",
y = "Attempted Homicide") +
theme_minimal()
# Install the fastDummies Package
install.packages('fastDummies')
# Load the fastDummies Package:
library('fastDummies')
# Create Dummy Variables for the 'State' Column
dataReorganized <- dummy_cols(dataReorganized, select_columns = 'State')
# View the Dummy Columns
head(dataReorganized)
View(dataReorganized)
getwd()
setwd("C:/Users/charl/Desktop/classes/Data Exploration and Preparation/CA1")
getwd()
setwd("C:/Users/thsan/Desktop/College/7_semester/Data_Exploration_and_Preparation/CA1/CA1")
library(tidyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
install.packages("robustbase")
install.packages("robustbase")
library(robustbase)
install.packages('fastDummies')
library('fastDummies')
# read the file
dataCrimes <- read.csv("C:/Users/thsan/Desktop/College/7_semester/Data_Exploration_and_Preparation/CA1/CA1/Crimes_in_Brazil_2015_2022.csv")
# Show 20 first
head(dataCrimes, 20)
dim(dataCrimes)
install.packages("fastDummies")
summary(dataCrimes)
install.packages("fastDummies")
# read the file
dataCrimes <- read.csv("C:/Users/thsan/Desktop/College/7_semester/Data_Exploration_and_Preparation/CA1/CA1/Crimes_in_Brazil_2015_2022.csv")
# Show 20 first
head(dataCrimes, 20)
dim(dataCrimes)
summary(dataCrimes)
# Reorganize the data
dataReorganized <- dataCrimes %>%
pivot_wider(names_from = `Tipo.Crime`, values_from = Ocorrências)
head(dataReorganized, 20)
#Translate the database titles from Portuguese to English
dataReorganized <- dataReorganized %>%
rename(
State = UF,
Year = Ano,
Month = Mês,
Rape = Estupro,
Vehicle_Theft = `Furto de veículo`,
Homicide = `Homicídio doloso`,
Bodily_injury_followed_by_death = `Lesão corporal seguida de morte`,
Robbery_Institution = `Roubo a instituição financeira`,
Cargo_Theft = `Roubo de carga`,
Vehicle_Robbery = `Roubo de veículo`,
Robbery_Followed_by_Death = `Roubo seguido de morte (latrocínio)`,
Attempted_Homicide = `Tentativa de homicídio`
)
# months translations
translation_dict <- c("janeiro" = "january",
"fevereiro" = "february",
"março" = "march",
"abril" = "april",
"maio" = "may",
"junho" = "june",
"julho" = "july",
"agosto" = "august",
"setembro" = "september",
"outubro" = "october",
"novembro" = "november",
"dezembro" = "december")
# replace the months from Portuguese to English
dataReorganized$Month <- translation_dict[dataReorganized$Month]
head(dataReorganized, 20)
# Find the mean of all crimes based in the states and month of a specific crime
means_crimes <- dataReorganized %>%
group_by(State, Month) %>%
summarise(across(c(Rape,
Vehicle_Theft, Homicide, Bodily_injury_followed_by_death,
Robbery_Institution, Cargo_Theft,Vehicle_Robbery,
Robbery_Followed_by_Death,
Attempted_Homicide), ~mean(., na.rm = TRUE), .names = "Mean_{.col}"))
# Replace NA values in the crime columns with the corresponding mean values, keeping only the columns with the results.
dataReorganized <- dataReorganized %>%
left_join(means_crimes, by = c("State", "Month")) %>%
mutate(across(c(Rape,
Vehicle_Theft, Homicide, Bodily_injury_followed_by_death,
Robbery_Institution, Cargo_Theft,Vehicle_Robbery,
Robbery_Followed_by_Death,
Attempted_Homicide), ~ifelse(is.na(.x), get(paste0("Mean_", cur_column())), .x)),
across(c(Rape,
Vehicle_Theft, Homicide, Bodily_injury_followed_by_death,
Robbery_Institution, Cargo_Theft, Vehicle_Robbery,
Robbery_Followed_by_Death,
Attempted_Homicide), ~as.integer(round(.)))) %>%
select(State, Year, Month, Rape, Vehicle_Theft, Homicide, Bodily_injury_followed_by_death, Robbery_Institution, Cargo_Theft, Vehicle_Robbery, Robbery_Followed_by_Death, Attempted_Homicide)
# Add a column  "Total Crimes"
dataReorganized <- dataReorganized %>%
mutate(Total_Crimes = rowSums(select(., -State, -Year, -Month), na.rm = TRUE))
head(dataReorganized[, c('State', 'Year', 'Month', 'Total_Crimes')], 20)
